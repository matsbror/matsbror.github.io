<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on EMBE innovation</title>
    <link>https://www.embeinnovation.com/post/</link>
    <description>Recent content in Articles on EMBE innovation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate><atom:link href="https://www.embeinnovation.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Maps With Other Languages</title>
      <link>https://www.embeinnovation.com/post/2-maps-other-languages/</link>
      <pubDate>Tue, 10 Nov 2020 08:57:22 +0100</pubDate>
      
      <guid>https://www.embeinnovation.com/post/2-maps-other-languages/</guid>
      <description>The Map Pattern in Other Languages In the first post on the map pattern I showed how the pattern could be coded in C++ in a few different ways. Now it&amp;rsquo;s time to look at some other popular languages: Rust, Java and Python.
A caveat: I am not a day-to-day user of these languages and they are partly a mystery to me as I do not exactly know how they are translated to machine code at the end.</description>
    </item>
    
    <item>
      <title>The Map Pattern</title>
      <link>https://www.embeinnovation.com/post/1-map-pattern/</link>
      <pubDate>Wed, 28 Oct 2020 14:36:44 +0200</pubDate>
      
      <guid>https://www.embeinnovation.com/post/1-map-pattern/</guid>
      <description>Parallel patterns According to Wikipedia, a software design pattern is &amp;ldquo;a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design&amp;rdquo;.
As a simple example, in the context of structural design of an algorithm, a repeated access of a vector/array item for a given index can be expressed with a loop structure instead of repeatedly accessing the vector updating the index manually.</description>
    </item>
    
  </channel>
</rss>
